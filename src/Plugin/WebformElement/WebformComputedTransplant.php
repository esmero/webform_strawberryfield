<?php
/**
 * Created by PhpStorm.
 * User: dpino
 * Date: 12/2/18
 * Time: 5:17 PM
 */

namespace Drupal\webform_strawberryfield\Plugin\WebformElement;

use Drupal\webform\Plugin\WebformElement\WebformComputedBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Utility\WebformElementHelper;
use Drupal\webform\Twig\WebformTwigExtension;
use Drupal\webform\WebformSubmissionInterface;

/**
 * Provides a 'webform_computed_transplant' element.

 * @WebformElement(
 *   id = "webform_computed_transplant",
 *   label = @Translation("Computed Metadata Transplant"),
 *   description = @Translation("Provides an item that takes source values(not only elements) and distributes them into other places/elements via a twig template"),
 *   category = @Translation("Computed Elements"),
 * )
 */
class WebformComputedTransplant extends WebformComputedBase {
  /**
   * {@inheritdoc}
   */
  protected function defineDefaultProperties() {
    return [
        'whitespace' => '',
        'transplanted' =>  ''
      ] + parent::defineDefaultProperties();
  }

  /****************************************************************************/


  public function prepare(
    array &$element,
    WebformSubmissionInterface $webform_submission = NULL
  ) {

    // @TODO explore this method to act on submitted data v/s element behavior

    parent::prepare($element,$webform_submission );
    $value = (string) $this->getValue($element, $webform_submission, []);
    $this->processComputedTransplant($element,$webform_submission);
  }


  public function alterForm(
    array &$element,
    array &$form,
    FormStateInterface $form_state
  ) {
    parent::alterForm(
      $element,
      $form,
      $form_state
    ); // TODO: Change the autogenerated stub

    $form_object = $form_state->getFormObject();
    /** @var \Drupal\webform\WebformSubmissionInterface $webform_submission */
    $webform_submission = $form_object->getEntity();

    $data = $webform_submission->getData();
    $originaldata = $webform_submission->getOriginalData();

    $webform = $webform_submission->getWebform();

    $form += ['#webform_transplant' => []];

    if ($webform) {
      $existing_elements = $webform->getElementsInitializedFlattenedAndHasValue('view');
      foreach ($existing_elements as $key => $existing_element) {
        if (isset($data[$key]) && !empty($data[$key]) && $key!= $this->getKey($element) && (!isset($originaldata[$key]) || empty($originaldata[$key]))) {
          $form['#webform_transplant'][$element['#webform_key']][$key] = $data[$key];
        }
      }
    }
    $form['#validate'][] = [get_called_class(), 'validateForm'];
  }


  /**
   * Webform validation handler for webform same element.
   */
  public static function validateForm(&$form, FormStateInterface $form_state) {

    $user_input = $form_state->getUserInput();
    $current_values =  $form_state->getValues();
    $computedvalues = [];
    foreach ($form['#webform_transplant'] as $element_key => $newvalues) {
      $computedvalues = array_merge($newvalues,$computedvalues);
    }
    array_unique($computedvalues);
    if (!empty($computedvalues)) {
      $form_state->setValues($current_values + $computedvalues);
      $form_state->setUserInput($user_input + $computedvalues);
    }
  }

  /**
   * {@inheritdoc}
   */
  public function form(array $form, FormStateInterface $form_state) {
    $form = parent::form($form, $form_state);

    $form['computed']['help'] = WebformTwigExtension::buildTwigHelp();
    $form['computed']['template']['#mode'] = 'twig';

    // Set #access so that help is always visible.
    WebformElementHelper::setPropertyRecursive($form['computed']['help'], '#access', TRUE);

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function preSave(array &$element, WebformSubmissionInterface $webform_submission, $update = TRUE) {

    // Recalculate the stored computed value to account new a submission's
    // generated sid and serial.
    $value = (string) $this->getValue($element, $webform_submission, []);
    parent::preSave($element, $webform_submission, $update);

  }


  private function processComputedTransplant(array &$element, $webform_submission) {

    // Important!
    // $webform_submission->getData(); will recompute
    // if empty \Drupal\webform\Entity\WebformSubmission::$computedData
    // $webform_submission->setData() will always reset computed data
    // which means we can not set a computed element!
    // $this->getValue($element, $webform_submission, []); will call also

    $value = (string) $this->getValue($element, $webform_submission, []);

    // Need to check if this is UTF-8?
    $value = html_entity_decode($value);
    $newdata = json_decode($value,TRUE);
    $json_error = json_last_error();
    //This will end with all data in an [0] index.
    $data = $webform_submission->getData();
    // We are forcely setting this one in case its not there
    // Will never be there if not saved as submission

    $originaldata = $webform_submission->getOriginalData();
    if ($json_error == JSON_ERROR_NONE && count($newdata)) {
      foreach ($newdata as $key => $value) {
        if (!isset($originaldata[$key]) || empty($originaldata[$key])) {
          $data[$key] = $value;
        }
      }
      $webform_submission->setData($data);
    }
  }

}
